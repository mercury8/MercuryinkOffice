---
// src/pages/[...slug].astro
import BlockRenderer from "../components/BlockRenderer.astro";
import CommonHead from "../components/CommonHead.astro";

// WordPress GraphQL API configuration
const WORDPRESS_GRAPHQL_URL = import.meta.env.WORDPRESS_GRAPHQL_URL || 'https://stupefied-lamport.77-68-32-117.plesk.page/WP/graphql';
const WORDPRESS_APP_PASSWORD = import.meta.env.WORDPRESS_APPLICATION_PASSWORD;

// Fetch page data from WordPress (runs on every request)
async function getPageData(slug) {
  if (!slug) return null;

  const query = `
    query GetPageBySlug($slug: String!) {
      pageBy(uri: $slug) {
        title
        content
        excerpt
        slug
        date
        status
        featuredImage {
          node {
            sourceUrl
            altText
          }
        }
        seo {
          title
          metaDesc
          canonical
        }
      }
    }
  `;

  try {
    const headers = {
      'Content-Type': 'application/json',
    };

    // Add authentication if needed
    if (WORDPRESS_APP_PASSWORD) {
      headers['Authorization'] = `Basic ${btoa(`username:${WORDPRESS_APP_PASSWORD}`)}`;
    }

    const response = await fetch(WORDPRESS_GRAPHQL_URL, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        query,
        variables: { slug }
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const { data, errors } = await response.json();

    if (errors) {
      console.error('GraphQL Errors:', errors);
      return null;
    }

    return data.pageBy;
  } catch (error) {
    console.error('Error fetching WordPress data:', error);
    return null;
  }
}

// Get the slug from the URL parameters
const { slug } = Astro.params;

// Fetch the page data (this happens on the server for each request)
const pageData = await getPageData(slug);

// Set 404 status if page not found
if (!pageData) {
  Astro.response.status = 404;
}

// Set the page title for SEO
const pageTitle = pageData?.title || 'Page Not Found';
---

<html lang="en">
  <head>
    <CommonHead />
    <title>{pageTitle}</title>
    <meta name="description" content={pageData?.seo?.metaDesc || pageData?.excerpt || ''} />
    
    <!-- Open Graph tags -->
    <meta property="og:title" content={pageData?.seo?.title || pageTitle} />
    <meta property="og:description" content={pageData?.seo?.metaDesc || pageData?.excerpt || ''} />
    <meta property="og:type" content="website" />
    
    {pageData?.featuredImage?.node?.sourceUrl && (
      <meta property="og:image" content={pageData.featuredImage.node.sourceUrl} />
    )}
  </head>
  
  <body>
    <header>
      <!-- Your header/navigation component -->
      <nav>
        <a href="/">Home</a>
        <!-- Add other navigation links -->
      </nav>
    </header>

    <main>
      {pageData ? (
        <article>
          <h1>{pageData.title}</h1>
          
          {pageData.featuredImage?.node?.sourceUrl && (
            <img 
              src={pageData.featuredImage.node.sourceUrl} 
              alt={pageData.featuredImage.node.altText || pageData.title}
              style="max-width: 100%; height: auto;"
            />
          )}
          
          <div set:html={pageData.content}></div>
        </article>
      ) : (
        <section>
          <h1>Page Not Found</h1>
          <p>Sorry, the page you're looking for doesn't exist.</p>
          <a href="/">Return to Homepage</a>
        </section>
      )}
    </main>

    <footer>
      <!-- Your footer component -->
      <p>&copy; 2024 Your Website. All rights reserved.</p>
    </footer>
  </body>
</html>